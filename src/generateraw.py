#! /usr/bin/env python
"""Script to generate the raw sub-package APIs

Basically just drives OpenGLGenerator with options to produce
the various modules we want..."""
import compileall
import logging
import os
import re
import sys

import openglgenerator
from OpenGL import platform

# put our OpenGL directory on the search path, just in case...
sys.path.insert(0, os.path.abspath(".."))

log = logging.getLogger("generateraw")

MODULE_DEFINITIONS = [
    ("GL", ("gl[A-Z0-9].*", "GL_.*")),
    ("GLU", ("glu[A-Z0-9].*", "GLU[_a-z0-9].*")),
    ("GLUT", ("glut[A-Z0-9].*", "GLUT[_a-z0-9].*")),
    ("GLE", None),
    ("GLX", None),
    ("WGL", ("wgl.*", "WGL.*")),
    ("AGL", None)]


def filter_modules(arguments):
    """Filter the set of modules according to command-line options

    no args == do everything, otherwise: only process declared modules"""
    if arguments:
        definitions = [x for x in MODULE_DEFINITIONS if x[0] in arguments]
    else:
        definitions = MODULE_DEFINITIONS
    return definitions


def main():
    base_modules = ["OpenGL.constants"]
    known_symbols = openglgenerator.OpenGLGenerator.loadKnownSymbols(base_modules)
    defined_symbols = known_symbols.copy()
    for (module, expressions) in filter_modules(sys.argv[1:]):
        log.info(f"Processing module: {module}")
        if expressions:
            expressions = [re.compile(e) for e in expressions]
        xml_file = f"{module.lower()}.xml"
        directory = f"../OpenGL/raw/{module}"
        try:
            os.makedirs(directory)
        except OSError:
            pass
        constants_file = os.path.join(directory, "constants.py")
        rawFile = os.path.join(directory, "__init__.py")
        open(rawFile, "w").close()  # create / wipe rawFile
        annotations_file = os.path.join(directory, "annotations.py")
        dll = getattr(platform, module, None)
        if dll and os.path.isfile(xml_file):
            log.info(f"Found DLL: {dll} and have XML source file: {xml_file}")
            # first the constants file...
            log.info(f"Generating constants {constants_file}")
            gen = openglgenerator.OpenGLGenerator(
                open(constants_file, "w"),
                generate_comments=False,
                searched_dlls=[dll],
                known_symbols=defined_symbols,
                module_header=f'""Constants for OpenGL.{module}' + "\n\n" +
                'Automatically generated by `src/generateraw.py`; DO NOT EDIT!"""')
            items = gen.load_typedefs(xml_file,
                                      types=[openglgenerator.codegenerator.typedesc.Variable],  # ick!
                                      expressions=expressions)
            gen.produce(items)
            gen.output.close()

            log.info(f"Generating raw API {rawFile}")
            constants_symbols = gen.loadKnownSymbols(
                [f"OpenGL.raw.{module}.constants"],
                flags=gen.EXPORT_SYMBOL,  # don"t import, do export
                doReload=True)
            constants_symbols.update(defined_symbols)
            constants_symbols.update(known_symbols)
            gen = openglgenerator.OpenGLGenerator(
                open(rawFile, "w"),
                generate_comments=True,
                searched_dlls=[dll],
                known_symbols=constants_symbols,
                module_header="\n".join(["# -*- coding: iso-8859-1 -*-",
                                         f'"""Raw (C-style) API for OpenGL.{module}',
                                         "",
                                         'Automatically generated by the generateraw script, do not edit!"""',
                                         f"from OpenGL.raw.{module}.constants import *"]))
            items = gen.load_typedefs(xml_file, expressions=expressions)
            gen.produce(items)
            gen.output.close()

            log.info(f"Generating annotations {annotations_file}", annotations_file)
            gen = openglgenerator.OpenGLGenerator(
                open(annotations_file, "w"),
                generate_comments=True,
                searched_dlls=[dll],
                emitters=[openglgenerator.OpenGLDecorator()],
                known_symbols=defined_symbols,
                module_header="\n".join([f'"""Array-size annotations for OpenGL.raw.{module}',
                                         "",
                                         'Automatically generated by the generateraw script, do not edit!"""',
                                         f"from OpenGL.raw import {module} as raw"]))
            items = gen.load_typedefs(xml_file,
                                      types=[openglgenerator.codegenerator.typedesc.Function],  # ick!
                                      expressions=expressions)
            gen.produce(items)
            gen.output.close()

            log.info(f"Suppressing future output of already-defined functions/structures: {module}")
            defined_symbols.update(
                gen.loadKnownSymbols([f"OpenGL.raw.{module}"], flags=0,  # neither import nor export from future operations...
                                     doReload=True))
            defined_symbols.update(
                gen.loadKnownSymbols([f"OpenGL.raw.{module}.constants"], flags=0,  # suppress future export of the constants
                                     doReload=True))
            defined_symbols.update(known_symbols)
            if module == "GL":
                # filter out the higher GL version stuff as well...
                # obviously you need to have the version stuff generated already to make this work!
                for version in ("1_2", "1_3", "1_4", "1_5", "2_0"):
                    log.info(f"Suppressing exports from Core GL Version {version}")
                    defined_symbols.update(
                        gen.loadKnownSymbols([f"OpenGL.raw.GL.VERSION.GL_{version}"],
                                             flags=0,  # suppress future export of the constants
                                             doReload=True))
            path = f"../OpenGL/raw/{module}"
            log.info(f"Forcing recompilation of {path}")
            compileall.compile_dir(path, maxlevels=2, force=True, quiet=True)


if __name__ == "__main__":
    logging.basicConfig()
    # logging.getLogger("codegenerator").setLevel(logging.DEBUG)
    log.setLevel(logging.INFO)
    main()
